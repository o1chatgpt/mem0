"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Send, Bot, User, RefreshCw } from "lucide-react"
import { cn } from "@/lib/utils"

interface AIFamilyMember {
  id: string
  name: string
  specialty: string
  description: string
  avatarUrl: string
  color: string
  model: string
  fallbackModel: string
  capabilities: string[]
  systemPrompt: string
  isActive: boolean
}

interface Message {
  id: string
  role: "user" | "assistant"
  content: string
  timestamp: Date
  aiMemberId?: string
}

interface ChatInterfaceProps {
  aiFamilyMembers: AIFamilyMember[]
}

export function ChatInterface({ aiFamilyMembers }: ChatInterfaceProps) {
  const [selectedAI, setSelectedAI] = useState<string>(aiFamilyMembers[0]?.id || "")
  const [messages, setMessages] = useState<Message[]>([])
  const [inputMessage, setInputMessage] = useState("")
  const [isLoading, setIsLoading] = useState(false)

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || !selectedAI) return

    const userMessage: Message = {
      id: Date.now().toString(),
      role: "user",
      content: inputMessage,
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInputMessage("")
    setIsLoading(true)

    // Simulate AI response
    setTimeout(() => {
      const selectedMember = aiFamilyMembers.find((member) => member.id === selectedAI)

      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        role: "assistant",
        content: `This is a simulated response from ${selectedMember?.name}. In a real application, this would be generated by an AI model based on your message: "${inputMessage}"`,
        timestamp: new Date(),
        aiMemberId: selectedAI,
      }

      setMessages((prev) => [...prev, aiResponse])
      setIsLoading(false)
    }, 1500)
  }

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  const getAIDetails = (id: string) => {
    return aiFamilyMembers.find((member) => member.id === id)
  }

  return (
    <div className="flex flex-col h-[calc(100vh-200px)] min-h-[500px]">
      <div className="mb-4">
        <Select value={selectedAI} onValueChange={setSelectedAI}>
          <SelectTrigger className="w-[250px]">
            <SelectValue placeholder="Select an AI assistant" />
          </SelectTrigger>
          <SelectContent>
            {aiFamilyMembers.map((member) => (
              <SelectItem key={member.id} value={member.id}>
                <div className="flex items-center">
                  <span className={`w-2 h-2 rounded-full mr-2 bg-${member.color}-500`}></span>
                  {member.name} - {member.specialty}
                </div>
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>

      <Card className="flex-1 flex flex-col overflow-hidden">
        <CardHeader className="py-3 px-4 border-b">
          <CardTitle className="text-lg font-medium">
            {selectedAI ? (
              <div className="flex items-center">
                <Avatar className="h-6 w-6 mr-2">
                  <AvatarImage src={getAIDetails(selectedAI)?.avatarUrl} alt={getAIDetails(selectedAI)?.name} />
                  <AvatarFallback>{getAIDetails(selectedAI)?.name.charAt(0)}</AvatarFallback>
                </Avatar>
                {getAIDetails(selectedAI)?.name} - {getAIDetails(selectedAI)?.specialty}
              </div>
            ) : (
              "Select an AI assistant"
            )}
          </CardTitle>
        </CardHeader>
        <CardContent className="flex-1 overflow-y-auto p-4 space-y-4">
          {messages.length === 0 ? (
            <div className="h-full flex items-center justify-center text-gray-500">
              <div className="text-center">
                <Bot className="mx-auto h-12 w-12 mb-2 opacity-50" />
                <p>Select an AI assistant and start chatting</p>
              </div>
            </div>
          ) : (
            messages.map((message) => (
              <div
                key={message.id}
                className={cn(
                  "flex items-start gap-3 rounded-lg p-3",
                  message.role === "user" ? "bg-muted/50 ml-auto max-w-[80%]" : "bg-primary/10 mr-auto max-w-[80%]",
                )}
              >
                {message.role === "assistant" ? (
                  <Avatar className="h-8 w-8">
                    <AvatarImage
                      src={getAIDetails(message.aiMemberId || "")?.avatarUrl}
                      alt={getAIDetails(message.aiMemberId || "")?.name}
                    />
                    <AvatarFallback>{getAIDetails(message.aiMemberId || "")?.name.charAt(0)}</AvatarFallback>
                  </Avatar>
                ) : (
                  <div className="h-8 w-8 rounded-full bg-primary flex items-center justify-center text-primary-foreground">
                    <User className="h-4 w-4" />
                  </div>
                )}
                <div className="flex-1">
                  <div className="text-sm font-medium mb-1">
                    {message.role === "user" ? "You" : getAIDetails(message.aiMemberId || "")?.name || "Assistant"}
                  </div>
                  <div className="text-sm whitespace-pre-wrap">{message.content}</div>
                  <div className="text-xs text-gray-500 mt-1">
                    {message.timestamp.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}
                  </div>
                </div>
              </div>
            ))
          )}
          {isLoading && (
            <div className="flex items-center justify-center text-gray-500">
              <RefreshCw className="h-4 w-4 animate-spin mr-2" />
              <span>{getAIDetails(selectedAI)?.name} is thinking...</span>
            </div>
          )}
        </CardContent>
      </Card>

      <div className="mt-4 flex gap-2">
        <Textarea
          value={inputMessage}
          onChange={(e) => setInputMessage(e.target.value)}
          onKeyDown={handleKeyDown}
          placeholder={`Message ${getAIDetails(selectedAI)?.name || "the assistant"}...`}
          className="flex-1 min-h-[60px] resize-none"
          disabled={!selectedAI || isLoading}
        />
        <Button
          onClick={handleSendMessage}
          disabled={!inputMessage.trim() || !selectedAI || isLoading}
          className="self-end"
        >
          <Send className="h-4 w-4" />
          <span className="sr-only">Send message</span>
        </Button>
      </div>
    </div>
  )
}
